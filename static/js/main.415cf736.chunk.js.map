{"version":3,"sources":["components/Card/Card.js","components/Filter/ExpenseFilter.js","components/Date/ExpenseDate.js","components/Item/ExpenseItem.js","components/ExpensesList/ExpensesList.js","components/ChartBar/ChartBar.js","components/Chart/Chart.js","components/Expenses/Expenses.js","components/Form/NewExpenseForm.js","components/NewExpense/NewExpense.js","components/Footer/Footer.js","App.js","index.js"],"names":["Card","props","classes","className","children","ExpenseFilter","onChange","event","onYearChange","target","value","defaultValue","selected","ExpenseDate","year","date","getFullYear","month","toLocaleString","day","ExpenseItem","formattedPrice","expense","price","style","currency","onClick","console","log","item","ExpensesList","filteredList","length","map","id","ChartBar","barFillHeight","maxValue","Math","round","height","label","Chart","chartDataPoints","forEach","getMonth","reduce","max","candidate","dataPoint","Expenses","useState","selectedYear","setSelectedYear","unit","expenses","filter","parseInt","expensesCount","receivedYear","NewExpenseForm","inputItem","inputPrice","inputDate","userInput","setUserInput","onSubmit","preventDefault","expenseData","Date","onFormSubmitToNewExpense","type","evt","prevState","required","min","step","setFormOpened","NewExpense","content","formOpened","receivedExpenseData","onNewExpenseSubmitToApp","Footer","d","href","rel","this","React","Component","INITIAL_LIST","App","expenseList","setExpenseList","align","receivedExpenseDataFromNewExpense","now","prevExpenseList","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.415cf736.chunk.js","sourcesContent":["import React from 'react';\n\nimport './Card.css'\n\nconst Card = (props) => {\n    const classes = `card ${props.className}`;\n    return (\n        <div className={classes}>\n            {props.children}\n            {/* {console.log(props.children)} */} \n            {/* children props is an object containing all elements wrapped around Card component */}\n        </div>\n    );\n}\n\nexport default Card;","import React from 'react';\n\nimport './ExpenseFilter.css';\n\nconst ExpenseFilter = (props) => {\n\n    // on select change handler\n    const yearChangeHandler = (event) => {\n        // lifting state up to Expenses component\n        props.onYearChange(event.target.value);\n    };\n    \n    return (\n        <div className=\"expenses-filter\">\n            <div className=\"expenses-filter__control\">\n                <label>Filter by year</label>\n                <select onChange={yearChangeHandler} defaultValue={props.selected}>\n                    <option value=\"2022\">2022</option>\n                    <option value=\"2021\">2021</option>\n                    <option value=\"2020\">2020</option>\n                    <option value=\"2019\">2019</option>\n                    <option value=\"all\">Show all</option>\n                </select>\n            </div>\n        </div>\n    );\n};\n\nexport default ExpenseFilter;\n","import React from 'react';\n\nimport './ExpenseDate.css';\n\nconst ExpenseDate = (props) => {\n    const year = props.date.getFullYear();\n    const month = props.date.toLocaleString('en-US', { month: 'long' });\n    const day = props.date.toLocaleString('en-US', { day: '2-digit' });\n\n    return (\n        <div className=\"expense-date\">\n            <div className=\"expense-date__year\">{year}</div>\n            <div className=\"expense-date__month\">{month}</div>\n            <div className=\"expense-date__date\">{day}</div>\n        </div>\n    );\n}\n\nexport default ExpenseDate;\n","import React, { useState } from 'react';\n\nimport './ExpenseItem.css';\nimport ExpenseDate from '../Date/ExpenseDate';\nimport Card from '../Card/Card';\n\n// props object containing expense object\nfunction ExpenseItem(props) {\n\n    /**\n     * ATTENTION!! â†’ Child components (ExpenseItem), which get data from App, should NOT have their own useState. \n     * If they do, the data will have its OWN state inside the child components, resulting in data not getting \n     * rendered correctly. Child states will override parent state, making newly added expenses getting added \n     * to the expense list, but not displayed on screen property.\n     */\n\n    \n    // useState Hook\n    // const [item, setItem] = useState(props.expense.item);\n    // const [newPrice, setNewPrice] = useState(props.expense.price);\n\n    // // event handlers\n    // const increaseClickHandler = () => {\n    //     setNewPrice(props.expense.price += 10000);\n    //     console.log(\"Increase\", newPrice);\n    // }\n    \n    // const decreaseClickHandler = () => {\n    //     setNewPrice(props.expense.price -= 10000);\n    //     console.log(\"Decrease\", newPrice);\n    // }\n    \n    const itemClickHandler = () => {\n        console.log(\"Clicked on\", props.expense.item, \"- Price:\", props.expense.price);\n    }\n    \n    // const clickHanlder = () => {\n    //     setItem('Updated!!');\n    //     console.log(item); // notice old value will get log, not updated value\n    // }\n    \n    // convert to VND\n    const formattedPrice = props.expense.price.toLocaleString('vi-VI', {style: 'currency', currency: 'VND'});\n    \n    // JSX\n    return (\n        <Card className=\"expense-item\">\n            <ExpenseDate date={props.expense.date} />\n            <div onClick={itemClickHandler} className=\"expense-item__description\">\n                <h2>{props.expense.item}</h2>\n                {/* <button className=\"btn\" onClick={decreaseClickHandler}>-</button> */}\n                <div className=\"expense-item__price\">{formattedPrice}</div>\n                {/* <button className=\"btn\" onClick={increaseClickHandler}>+</button> */}\n            </div>\n        </Card>\n    );\n}\n\nexport default ExpenseItem;\n","import React from 'react';\n\nimport './ExpensesList.css';\nimport ExpenseItem from '../Item/ExpenseItem';\n\nconst ExpensesList = (props) => {\n    if (props.filteredList.length === 0) {\n        return <h3 className=\"expense-list__notFound\">{'No expenses found'}</h3>;\n    } \n\n    return (\n        <ul className=\"expense-list\">\n            {props.filteredList.map(expense => (\n                <ExpenseItem key={expense.id} expense={expense} />\n            ))}\n        </ul>\n    );\n};\n\nexport default ExpensesList;\n","import React from 'react';\n\nimport './ChartBar.css';\n\nconst ChartBar = (props) => {\n    let barFillHeight = '0%';\n\n    if (props.maxValue > 0) {\n        barFillHeight = Math.round((props.value / props.maxValue) * 100) + '%';\n    }\n\n    return (\n        <div className=\"chart-bar\">\n            <div className=\"chart-bar__inner\">\n                <div className=\"chart-bar__fill\" style={{height: barFillHeight}}></div>\n            </div>\n            <div className=\"chart-bar__label\">{props.label}</div>\n        </div>\n    )\n};\n\nexport default ChartBar;","import React from 'react';\n\nimport './Chart.css';\nimport ChartBar from '../ChartBar/ChartBar';\n\nconst Chart = (props) => {\n    // init an object to store calulated total expeses then pass to ChartBar\n    const chartDataPoints = [\n        { label: 'Jan', value: 0 },\n        { label: 'Feb', value: 0 },\n        { label: 'Mar', value: 0 },\n        { label: 'Apr', value: 0 },\n        { label: 'May', value: 0 },\n        { label: 'Jun', value: 0 },\n        { label: 'Jul', value: 0 },\n        { label: 'Aug', value: 0 },\n        { label: 'Sep', value: 0 },\n        { label: 'Oct', value: 0 },\n        { label: 'Nov', value: 0 },\n        { label: 'Dec', value: 0 },\n    ];\n\n    // sum total expenses by month\n    props.filteredList.forEach(expense => {\n        const month = expense.date.getMonth(); // month starts at 0 => Jan = 0\n        chartDataPoints[month].value += expense.price;\n        // console.log(expense, month);\n    });\n\n    // console.log(chartDataPoints); // gottem!\n    \n    // look for max value among the expenses\n    const maxValue = chartDataPoints.reduce((max, candidate) => {\n        if (candidate.value > max.value) return candidate;\n        return max;\n    })\n\n    console.log('MAXXXXXXXXX', maxValue);\n\n    return (\n        <div className=\"chart\">\n            {/* {props.dataPoints.map(data => (\n                <ChartBar \n                    key={} \n                    label={} \n                    value={} \n                    maxValue={} \n                />\n            ))} */}\n            {/* {\n                <ChartBar\n                    key={chartDataPoints.label}\n                    label={chartDataPoints.label}\n                    value={chartDataPoints.value}\n                />\n            } */}\n            {chartDataPoints.map((dataPoint) => (\n                <ChartBar\n                    key={dataPoint.label}\n                    label={dataPoint.label}\n                    value={dataPoint.value}\n                    maxValue={maxValue.value}\n                />\n            ))}\n        </div>\n    );\n};\n\nexport default Chart;\n","import React, { useState } from 'react';\n\nimport './Expenses.css';\nimport Card from '../Card/Card';\nimport ExpenseFilter from '../Filter/ExpenseFilter';\nimport ExpensesList from '../ExpensesList/ExpensesList';\nimport Chart from '../Chart/Chart';\n\nconst Expenses = (props) => {\n    const [selectedYear, setSelectedYear] = useState('all');\n    let filteredList;\n\n    // event handler for getting data from Filter\n    const yearChangeHandler = (receivedYear) => {\n        setSelectedYear(receivedYear);\n    };\n\n    if (selectedYear === 'all') {\n        filteredList = props.expenses;\n    } else {\n        filteredList = props.expenses.filter(\n            (expense) => expense.date.getFullYear() === parseInt(selectedYear)\n        );\n    }\n\n    // store JSX content in a variable to make the code cleaner\n    // const expensesContent = filteredList.map(expense => <ExpenseItem key={expense.id} expense={expense} />);\n    // const expensesCount = filteredList.length === 0 ? <p>No expenses found.</p> : <p>Total: {filteredList.length} {(filteredList.length === 1 ? 'item' : 'items')}</p>; // not the cleanest but it looks cool =))\n    \n    let unit = filteredList.length === 1 ? 'item' : 'items';\n\n    const expensesCount = <p className=\"expenses-counter\">Total: {filteredList.length} {unit}</p>\n\n    return (\n        <div>\n            <Card className=\"expenses\">\n                <ExpenseFilter\n                    selected={selectedYear}\n                    onYearChange={yearChangeHandler}\n                />\n\n                {/* 64. --- rendering list dynamically with map --- */}\n                {/* {filteredList = props.expenses.filter(\n                (expense) => expense.date.getFullYear() === parseInt(selectedYear))} */}\n\n                {/* 64. --- above is similar to this---  */}\n                {/* {[<ExpenseItem props={props.expenses[0]} />,\n                <ExpenseItem props={props.expenses[1]} />,\n                <ExpenseItem props={props.expenses[2]} />,\n                <ExpenseItem props={props.expenses[3]} />]} */}\n\n                {/* 67. --- inline tenary condition--- */}\n                {/* {filteredList.length === 0 ? (\n                    <p>No expenses found</p>\n                ) : (\n                    <p>\n                        Total: {filteredList.length}{' '}\n                        {filteredList.length === 1 ? 'expense' : 'expenses'}\n                    </p>\n                )} */}\n\n                {/* 67. --- using the && operator trick --- */}\n                {/* {filteredList.length === 0 && <p>No expenses found</p>}\n                {filteredList.length > 0 && (\n                    <p>\n                        Total: {filteredList.length}{' '}\n                        {filteredList.length === 1 ? 'expense' : 'expenses'}\n                    </p>\n                )} */}\n\n                {/* 67. Separate the logics from UI */}\n                {/* {expensesContent}\n                {expensesCount} */}\n\n                {/* 71. Chart component */}\n                <Chart filteredList={filteredList} />\n\n                {/* 68. adding conditional return */}\n                <ExpensesList filteredList={filteredList} />\n                {filteredList.length > 0 && expensesCount}\n            </Card>\n        </div>\n    );\n};\n\nexport default Expenses;\n","import React, { useState } from 'react';\n\nimport './NewExpenseForm.css';\n\nconst NewExpenseForm = (props) => {\n    // // ----- multiple states approach -----\n    // const [inputItem, setInputItem] = useState('');\n    // const [inputPrice, setInputPrice] = useState('');\n    // const [inputDate, setInputDate] = useState('');\n\n    // // state change handlers\n    // const changeItemHandler = (evt) => {\n    //     setInputItem(evt.target.value);\n    // };\n\n    // const changePriceHandler = (evt) => {\n    //     setInputPrice(evt.target.value);\n    // };\n\n    // const changeDateHandler = (evt) => {\n    //     setInputDate(evt.target.value);\n    // };\n\n\n    // ----- one useState Hook approach ------\n    const [userInput, setUserInput] = useState({\n        inputItem: '',\n        inputPrice: '',\n        inputDate: '',\n    });\n\n    const changeItemHandler = (evt) => {\n        // setUserInput({\n        //     ...userInput,\n        //     inputItem: evt.target.value,\n        // });\n\n        // function form for previous state\n        setUserInput((prevState) => {\n            return {\n                ...prevState,\n                inputItem: evt.target.value\n            };\n        });\n    };\n\n    const changePriceHandler = (evt) => {\n        // setUserInput({\n        //     ...userInput,\n        //     inputPrice: evt.target.value,\n        // });\n        \n        // function form for previous state\n        setUserInput((prevState) => {\n            return {\n                ...prevState,\n                inputPrice: evt.target.value\n            };\n        });\n    };\n\n    const changeDateHandler = (evt) => {\n        // setUserInput({\n        //     ...userInput,\n        //     inputDate: evt.target.value,\n        // });\n\n        // function form for previous state\n        setUserInput((prevState) => {\n            return {\n                ...prevState,\n                inputDate: evt.target.value\n            };\n        });\n    };\n\n\n    // --- Form handler ---\n    const formSubmitHandler = (event) => {\n        // prevent form submission\n        event.preventDefault();\n        \n        // collecting data\n        const expenseData = {\n            item: userInput.inputItem, \n            price: parseInt(userInput.inputPrice), \n            date: new Date(userInput['inputDate'])\n        }\n\n        // send data up from Form to NewExpense\n        props.onFormSubmitToNewExpense(expenseData);\n\n        // 2-way binding, resetting input values\n        setUserInput({\n            inputItem: '',\n            inputPrice: '',\n            inputDate: '',\n        })\n    };\n\n\n    // JSX\n    return (\n        <form onSubmit={formSubmitHandler}>\n            <div className=\"new-expense__controls\">\n                <div className=\"new-expense__control\">\n                    <label>Item</label>\n                    <input \n                        type=\"text\" \n                        onChange={changeItemHandler} \n                        value={userInput.inputItem} // resetting input\n                        required \n                        />\n                </div>\n                <div className=\"new-expense__control\">\n                    <label>Price</label>\n                    <input\n                        type=\"number\"\n                        min=\"1\"\n                        step=\"1\"\n                        onChange={changePriceHandler}\n                        value={userInput.inputPrice} // resetting input\n                        required\n                    />\n                </div>\n                <div className=\"new-expense__control\">\n                    <label>Date</label>\n                    <input\n                        type=\"date\"\n                        min=\"2018-01-01\"\n                        max=\"2022-12-31\"\n                        onChange={changeDateHandler}\n                        value={userInput.inputDate} // resetting input\n                    />\n                </div>\n            </div>\n            <div className=\"new-expense__actions\">\n                <button type=\"button\" onClick={() => props.setFormOpened(false)}>Cancel</button>\n                <button type=\"submit\">Add Expense</button>\n            </div>\n        </form>\n    );\n};\n\nexport default NewExpenseForm;\n","import React, { useState } from 'react';\n\nimport './NewExpense.css';\nimport NewExpenseForm from '../Form/NewExpenseForm';\n\nconst NewExpense = (props) => {\n    const [formOpened, setFormOpened] = useState(false);\n    let content;\n\n    const saveExpenseDataHandler = (receivedExpenseData) => {\n        // const expenseData = {\n        //     ...receivedExpenseData\n        // }\n        props.onNewExpenseSubmitToApp(receivedExpenseData);\n        setFormOpened(false);\n    }\n    \n    // --- Asm4. handler to toggle between form and add new button\n    const addExpenseHandler = () => {\n        // if (!formOpened) setFormOpened(true);\n        // else setFormOpened(false);\n        formOpened ? setFormOpened(false) : setFormOpened(true); // cleaner :>\n    }\n\n    if (!formOpened) {       \n        content = <button onClick={addExpenseHandler}>Add New Expense</button>;\n    } else {\n        content = <NewExpenseForm onFormSubmitToNewExpense={saveExpenseDataHandler} setFormOpened={setFormOpened} />\n    }\n\n    return (\n        <div className=\"new-expense\">\n            {content}\n        </div>\n    );\n};\n\nexport default NewExpense;\n","import React from 'react';\n\nimport './Footer.css';\n\n// const Footer = () => {\n//     const d = new Date();\n//     const year = d.getFullYear();\n\n//     return (\n//         <p>\n//             <a href='https://github.com/hoangdesu/' target='_blank' rel='noreferrer'>Hoang Nguyen&#169;{year}</a>\n//         </p>\n//     );\n// };\n\n// class component\nclass Footer extends React.Component {\n    d = new Date();\n    year = this.d.getFullYear();\n    render() {\n        return (\n            <div className=\"footer\">\n                <a\n                    href=\"https://github.com/hoangdesu/ReactJS-Course\"\n                    target=\"_blank\"\n                    rel=\"noreferrer\"\n                >\n                    First React project by Hoang Nguyen&#169;{this.year}\n                </a>\n            </div>\n        );\n    }\n}\n\nexport default Footer;\n","import React, { useState } from 'react';\n\nimport Expenses from './components/Expenses/Expenses';\nimport NewExpense from './components/NewExpense/NewExpense';\nimport Footer from './components/Footer/Footer';\n\nconst INITIAL_LIST = [\n    {\n        id: 'e1',\n        item: 'Curnon watch',\n        price: 3000000,\n        date: new Date(2021, 1, 26)\n    },\n    {\n        id: 'e2',\n        item: 'Keychron K2',\n        price: 5500000,\n        date: new Date(2020, 11, 15)\n    },\n    {\n        id: 'e3',\n        item: 'Delux mouse',\n        price: 250000,\n        date: new Date(2021, 6, 10)\n    },\n    {\n        id: 'e4',\n        item: 'Razer Blackwidow',\n        price: 3450000,\n        date: new Date(2019, 7, 15)\n    },\n    {\n        id: 'e5',\n        item: 'AirPods 2',\n        price: 5000000,\n        date: new Date(2021, 5, 30)\n    },\n    {\n        id: 'e6',\n        item: 'Razer DeathAdder',\n        price: 2790000,\n        date: new Date(2019, 8, 9)\n    },\n    {\n        id: 'e7',\n        item: 'Macbook Pro 2015',\n        price: 15000000,\n        date: new Date(2020, 9, 9)\n    },\n    {\n        id: 'e8',\n        item: 'iPhone 6 Plus',\n        price: 3200000,\n        date: new Date(2020, 4, 12)\n    }\n];\n\nconst App = () => {\n    const [expenseList, setExpenseList] = useState(INITIAL_LIST);\n\n    // --- Event handlers ---\n    // receive data from <NewExpense />\n    const saveNewExpenseDataHandler = (receivedExpenseDataFromNewExpense) => {\n        const expenseData = {\n            ...receivedExpenseDataFromNewExpense,\n            id: Date.now() // using epoch time as id\n        }\n        \n        setExpenseList((prevExpenseList) => {\n            return [expenseData, ...prevExpenseList]\n        })\n    };\n    \n    console.log(expenseList);\n    \n    // modern JSX\n    return (\n        <div>\n            <h2 align=\"center\">Expense Tracker</h2>\n            {/* <Chart /> */}\n            <NewExpense onNewExpenseSubmitToApp={saveNewExpenseDataHandler} />\n            <Expenses expenses={expenseList} />\n            <Footer />\n        </div>\n    );\n\n\n    \n    // ----- alternative way: behind the scence, old way that return the same JSX from above\n    // return React.createElement(\n    //     'div',\n    //     {},\n    //     React.createElement('h1', {}, 'Expense Tracker using createElement'),\n    //     React.createElement(Expenses, { expenses: expenses })\n    // );\n}\n\nexport default App;","import ReactDOM from 'react-dom';\n\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}