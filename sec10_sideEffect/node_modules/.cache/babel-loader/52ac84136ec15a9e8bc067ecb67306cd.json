{"ast":null,"code":"var _jsxFileName = \"/Users/doroke/KUMO/Code playground/ReactJS Course/sec10_sideEffect/src/App.js\",\n    _s = $RefreshSig$();\n\nimport React, { useContext } from \"react\";\nimport Login from \"./components/Login/Login\";\nimport Home from \"./components/Home/Home\";\nimport MainHeader from \"./components/MainHeader/MainHeader\";\nimport AuthContext from \"./store/auth-context\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nfunction App() {\n  _s();\n\n  // clean up App -> move logics into auth-context\n  // const [isLoggedIn, setIsLoggedIn] = useState(false);\n  // // only runs once when the component did mount\n  // useEffect(() => {\n  //   if (localStorage.getItem(\"loggedIn\") === \"1\") {\n  //     setIsLoggedIn(true);\n  //   }\n  // }, []);\n  // const loginHandler = (email, password) => {\n  //   // We should of course check email and password\n  //   // But it's just a dummy/ demo anyways\n  //   setIsLoggedIn(true);\n  //   // store login state in local storage\n  //   localStorage.setItem(\"loggedIn\", \"1\");\n  // };\n  // const logoutHandler = () => {\n  //   setIsLoggedIn(false);\n  //   localStorage.removeItem(\"loggedIn\");\n  // };\n  const ctx = useContext(AuthContext);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(MainHeader, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"main\", {\n      children: [!ctx.isLoggedIn && /*#__PURE__*/_jsxDEV(Login, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 39,\n        columnNumber: 29\n      }, this), isLoggedIn && /*#__PURE__*/_jsxDEV(Home, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 40,\n        columnNumber: 24\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n}\n\n_s(App, \"/dMy7t63NXD4eYACoT93CePwGrg=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/Users/doroke/KUMO/Code playground/ReactJS Course/sec10_sideEffect/src/App.js"],"names":["React","useContext","Login","Home","MainHeader","AuthContext","App","ctx","isLoggedIn"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,UAAhB,QAAkC,OAAlC;AAEA,OAAOC,KAAP,MAAkB,0BAAlB;AACA,OAAOC,IAAP,MAAiB,wBAAjB;AACA,OAAOC,UAAP,MAAuB,oCAAvB;AACA,OAAOC,WAAP,MAAwB,sBAAxB;;;;AAEA,SAASC,GAAT,GAAe;AAAA;;AACb;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA,QAAMC,GAAG,GAAGN,UAAU,CAACI,WAAD,CAAtB;AAEA,sBACE;AAAA,4BACE,QAAC,UAAD;AAAA;AAAA;AAAA;AAAA,YADF,eAEE;AAAA,iBACG,CAACE,GAAG,CAACC,UAAL,iBAAmB,QAAC,KAAD;AAAA;AAAA;AAAA;AAAA,cADtB,EAEGA,UAAU,iBAAI,QAAC,IAAD;AAAA;AAAA;AAAA;AAAA,cAFjB;AAAA;AAAA;AAAA;AAAA;AAAA,YAFF;AAAA,kBADF;AASD;;GApCQF,G;;KAAAA,G;AAsCT,eAAeA,GAAf","sourcesContent":["import React, { useContext } from \"react\";\n\nimport Login from \"./components/Login/Login\";\nimport Home from \"./components/Home/Home\";\nimport MainHeader from \"./components/MainHeader/MainHeader\";\nimport AuthContext from \"./store/auth-context\";\n\nfunction App() {\n  // clean up App -> move logics into auth-context\n  // const [isLoggedIn, setIsLoggedIn] = useState(false);\n\n  // // only runs once when the component did mount\n  // useEffect(() => {\n  //   if (localStorage.getItem(\"loggedIn\") === \"1\") {\n  //     setIsLoggedIn(true);\n  //   }\n  // }, []);\n\n  // const loginHandler = (email, password) => {\n  //   // We should of course check email and password\n  //   // But it's just a dummy/ demo anyways\n  //   setIsLoggedIn(true);\n\n  //   // store login state in local storage\n  //   localStorage.setItem(\"loggedIn\", \"1\");\n  // };\n\n  // const logoutHandler = () => {\n  //   setIsLoggedIn(false);\n  //   localStorage.removeItem(\"loggedIn\");\n  // };\n\n  const ctx = useContext(AuthContext);\n\n  return (\n    <>\n      <MainHeader />\n      <main>\n        {!ctx.isLoggedIn && <Login />}\n        {isLoggedIn && <Home />}\n      </main>\n    </>\n  );\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}