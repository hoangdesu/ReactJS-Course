{"ast":null,"code":"var _jsxFileName = \"/Users/doroke/KUMO/Code playground/ReactJS Course/sec10_sideEffect/src/components/Login/Login.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect, useReducer, useContext, useRef } from \"react\";\nimport Card from \"../UI/Card/Card\";\nimport classes from \"./Login.module.css\";\nimport Button from \"../UI/Button/Button\";\nimport Input from \"../UI/Input/Input\";\nimport AuthContext from \"../../store/auth-context\"; // REDUCER FUNCTIONS\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst emailReducer = (state, action) => {\n  if (action.type === \"USER_INPUT\") {\n    return {\n      value: action.value,\n      isValid: action.value.includes(\"@\")\n    };\n  }\n\n  if (action.type === \"INPUT_BLUR\") {\n    return {\n      value: state.value,\n      isValid: state.value.includes(\"@\")\n    };\n  }\n\n  return {\n    value: \"\",\n    isValid: false\n  };\n};\n\nconst passwordReducer = (state, action) => {\n  if (action.type === \"PASSWORD_INPUT\") {\n    return {\n      value: action.value,\n      isValid: action.value.trim().length > 6\n    };\n  }\n\n  if (action.type === \"PASSWORD_BLUR\") {\n    return {\n      value: state.value,\n      isValid: state.value.trim().length > 6\n    };\n  }\n\n  return {\n    value: \"\",\n    isValid: false\n  };\n}; // FUNCTION COMPONENT\n\n\nconst Login = props => {\n  _s();\n\n  // const [enteredEmail, setEnteredEmail] = useState('');\n  // const [emailIsValid, setEmailIsValid] = useState();\n  // const [enteredPassword, setEnteredPassword] = useState('');\n  // const [passwordIsValid, setPasswordIsValid] = useState();\n  const [formIsValid, setFormIsValid] = useState(false);\n  const authCtx = useContext(AuthContext);\n  const emailInputRef = useRef();\n  const passwordInputRef = useRef(); // USE REDUCER\n\n  const [emailState, dispatchEmail] = useReducer(emailReducer, {\n    value: \"\",\n    isValid: false\n  });\n  const [passwordState, dispatchPassword] = useReducer(passwordReducer, {\n    value: \"\",\n    isValid: false\n  }); // USE EFFECTS\n\n  useEffect(() => {\n    return () => {\n      console.log(\"component removed\");\n    };\n  }, []); // Avoid unnecessary effect executions, optimize code! Trigger only when isValid states change\n\n  const {\n    isValid: emailIsValid\n  } = emailState;\n  const {\n    isValid: passwordIsValid\n  } = passwordState; // DEBOUNCING EFFECT: CHECK INPUT EVERY 500ms\n\n  useEffect(() => {\n    const debounceTimeout = setTimeout(() => {\n      console.log(\"checking form valid\"); // setFormIsValid(\n      //     enteredEmail.includes('@') && enteredPassword.trim().length > 6\n      // );\n\n      setFormIsValid(emailIsValid && passwordIsValid);\n    }, 500);\n    return () => {\n      console.log(\"input clean up\");\n      clearTimeout(debounceTimeout);\n    };\n  }, [emailIsValid, passwordIsValid]); // HANDLERS\n\n  const emailChangeHandler = event => {\n    // setEnteredEmail(event.target.value);\n    // USING DISPATCH WITH ACTION\n    dispatchEmail({\n      type: \"USER_INPUT\",\n      value: event.target.value\n    }); // setFormIsValid(\n    //     emailState.isValid && event.target.value.trim().length > 6\n    // );\n    // setFormIsValid(emailState.isValid && passwordState.isValid);\n  };\n\n  const passwordChangeHandler = event => {\n    // setEnteredPassword(event.target.value);\n    dispatchPassword({\n      type: \"PASSWORD_INPUT\",\n      value: event.target.value\n    }); // setFormIsValid(\n    //     emailState.isValid && event.target.value.trim().length > 6\n    // );\n    // setFormIsValid(emailState.isValid && passwordState.isValid);\n  };\n\n  const validateEmailHandler = () => {\n    // setEmailIsValid(emailState.isValid);\n    dispatchEmail({\n      type: \"INPUT_BLUR\"\n    });\n  };\n\n  const validatePasswordHandler = () => {\n    // setPasswordIsValid(enteredPassword.trim().length > 6);\n    dispatchPassword({\n      type: \"PASSWORD_BLUR\"\n    });\n  };\n\n  const submitHandler = event => {\n    event.preventDefault();\n\n    if (formIsValid) {\n      authCtx.onLogin(emailState.value, passwordState.value);\n    } else if (!emailIsValid) {\n      emailInputRef.current.activate();\n    } else if (!passwordIsValid) {}\n  };\n\n  return /*#__PURE__*/_jsxDEV(Card, {\n    className: classes.login,\n    children: /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: submitHandler,\n      children: [/*#__PURE__*/_jsxDEV(Input, {\n        id: \"email\",\n        label: \"E-mail\",\n        type: \"email\",\n        isValid: emailIsValid,\n        value: emailState.value,\n        onChange: emailChangeHandler,\n        onBlur: validateEmailHandler,\n        ref: emailInputRef\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 162,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Input, {\n        id: \"password\",\n        label: \"Password\",\n        type: \"password\",\n        isValid: passwordIsValid,\n        value: passwordState.value,\n        onChange: passwordChangeHandler,\n        onBlur: validatePasswordHandler,\n        ref: passwordInputRef\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 172,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: classes.actions,\n        children: /*#__PURE__*/_jsxDEV(Button, {\n          type: \"submit\",\n          className: classes.btn,\n          children: \"Login\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 183,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 182,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 133,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 132,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Login, \"Y1bwTvMf0kkpEtqarJeStD6svSQ=\");\n\n_c = Login;\nexport default Login;\n\nvar _c;\n\n$RefreshReg$(_c, \"Login\");","map":{"version":3,"sources":["/Users/doroke/KUMO/Code playground/ReactJS Course/sec10_sideEffect/src/components/Login/Login.js"],"names":["React","useState","useEffect","useReducer","useContext","useRef","Card","classes","Button","Input","AuthContext","emailReducer","state","action","type","value","isValid","includes","passwordReducer","trim","length","Login","props","formIsValid","setFormIsValid","authCtx","emailInputRef","passwordInputRef","emailState","dispatchEmail","passwordState","dispatchPassword","console","log","emailIsValid","passwordIsValid","debounceTimeout","setTimeout","clearTimeout","emailChangeHandler","event","target","passwordChangeHandler","validateEmailHandler","validatePasswordHandler","submitHandler","preventDefault","onLogin","current","activate","login","actions","btn"],"mappings":"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","sourcesContent":["import React, {\n  useState,\n  useEffect,\n  useReducer,\n  useContext,\n  useRef,\n} from \"react\";\n\nimport Card from \"../UI/Card/Card\";\nimport classes from \"./Login.module.css\";\nimport Button from \"../UI/Button/Button\";\nimport Input from \"../UI/Input/Input\";\nimport AuthContext from \"../../store/auth-context\";\n\n// REDUCER FUNCTIONS\nconst emailReducer = (state, action) => {\n  if (action.type === \"USER_INPUT\") {\n    return { value: action.value, isValid: action.value.includes(\"@\") };\n  }\n  if (action.type === \"INPUT_BLUR\") {\n    return { value: state.value, isValid: state.value.includes(\"@\") };\n  }\n  return { value: \"\", isValid: false };\n};\n\nconst passwordReducer = (state, action) => {\n  if (action.type === \"PASSWORD_INPUT\") {\n    return { value: action.value, isValid: action.value.trim().length > 6 };\n  }\n  if (action.type === \"PASSWORD_BLUR\") {\n    return { value: state.value, isValid: state.value.trim().length > 6 };\n  }\n  return { value: \"\", isValid: false };\n};\n\n// FUNCTION COMPONENT\n\nconst Login = (props) => {\n  // const [enteredEmail, setEnteredEmail] = useState('');\n  // const [emailIsValid, setEmailIsValid] = useState();\n  // const [enteredPassword, setEnteredPassword] = useState('');\n  // const [passwordIsValid, setPasswordIsValid] = useState();\n  const [formIsValid, setFormIsValid] = useState(false);\n  const authCtx = useContext(AuthContext);\n  const emailInputRef = useRef();\n  const passwordInputRef = useRef();\n\n  // USE REDUCER\n  const [emailState, dispatchEmail] = useReducer(emailReducer, {\n    value: \"\",\n    isValid: false,\n  });\n\n  const [passwordState, dispatchPassword] = useReducer(passwordReducer, {\n    value: \"\",\n    isValid: false,\n  });\n\n  // USE EFFECTS\n  useEffect(() => {\n    return () => {\n      console.log(\"component removed\");\n    };\n  }, []);\n\n  // Avoid unnecessary effect executions, optimize code! Trigger only when isValid states change\n  const { isValid: emailIsValid } = emailState;\n  const { isValid: passwordIsValid } = passwordState;\n\n  // DEBOUNCING EFFECT: CHECK INPUT EVERY 500ms\n  useEffect(() => {\n    const debounceTimeout = setTimeout(() => {\n      console.log(\"checking form valid\");\n      // setFormIsValid(\n      //     enteredEmail.includes('@') && enteredPassword.trim().length > 6\n      // );\n      setFormIsValid(emailIsValid && passwordIsValid);\n    }, 500);\n\n    return () => {\n      console.log(\"input clean up\");\n      clearTimeout(debounceTimeout);\n    };\n  }, [emailIsValid, passwordIsValid]);\n\n  // HANDLERS\n  const emailChangeHandler = (event) => {\n    // setEnteredEmail(event.target.value);\n\n    // USING DISPATCH WITH ACTION\n    dispatchEmail({ type: \"USER_INPUT\", value: event.target.value });\n\n    // setFormIsValid(\n    //     emailState.isValid && event.target.value.trim().length > 6\n    // );\n\n    // setFormIsValid(emailState.isValid && passwordState.isValid);\n  };\n\n  const passwordChangeHandler = (event) => {\n    // setEnteredPassword(event.target.value);\n\n    dispatchPassword({ type: \"PASSWORD_INPUT\", value: event.target.value });\n\n    // setFormIsValid(\n    //     emailState.isValid && event.target.value.trim().length > 6\n    // );\n    // setFormIsValid(emailState.isValid && passwordState.isValid);\n  };\n\n  const validateEmailHandler = () => {\n    // setEmailIsValid(emailState.isValid);\n    dispatchEmail({ type: \"INPUT_BLUR\" });\n  };\n\n  const validatePasswordHandler = () => {\n    // setPasswordIsValid(enteredPassword.trim().length > 6);\n    dispatchPassword({ type: \"PASSWORD_BLUR\" });\n  };\n\n  const submitHandler = (event) => {\n    event.preventDefault();\n    if (formIsValid) {\n      authCtx.onLogin(emailState.value, passwordState.value);\n    } else if (!emailIsValid) {\n      emailInputRef.current.activate();\n    } else if (!passwordIsValid) {\n    }\n  };\n\n  return (\n    <Card className={classes.login}>\n      <form onSubmit={submitHandler}>\n        {/* <div\n          className={`${classes.control} ${\n              emailState.isValid === false ? classes.invalid : ''\n          }`}\n      >\n          <label htmlFor=\"email\">E-Mail</label>\n          <input\n              type=\"email\"\n              id=\"email\"\n              value={emailState.value}\n              onChange={emailChangeHandler}\n              onBlur={validateEmailHandler}\n          />\n      </div>\n      <div\n          className={`${classes.control} ${\n              passwordState.isValid === false ? classes.invalid : ''\n          }`}\n      >\n          <label htmlFor=\"password\">Password</label>\n          <input\n              type=\"password\"\n              id=\"password\"\n              value={passwordState.value}\n              onChange={passwordChangeHandler}\n              onBlur={validatePasswordHandler}\n          />\n                </div> */}\n        <Input\n          id=\"email\"\n          label=\"E-mail\"\n          type=\"email\"\n          isValid={emailIsValid}\n          value={emailState.value}\n          onChange={emailChangeHandler}\n          onBlur={validateEmailHandler}\n          ref={emailInputRef}\n        />\n        <Input\n          id=\"password\"\n          label=\"Password\"\n          type=\"password\"\n          isValid={passwordIsValid}\n          value={passwordState.value}\n          onChange={passwordChangeHandler}\n          onBlur={validatePasswordHandler}\n          ref={passwordInputRef}\n        />\n        <div className={classes.actions}>\n          <Button type=\"submit\" className={classes.btn}>\n            Login\n          </Button>\n        </div>\n      </form>\n    </Card>\n  );\n};\n\nexport default Login;\n"]},"metadata":{},"sourceType":"module"}